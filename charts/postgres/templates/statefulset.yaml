apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
spec:
  replicas: 1
  serviceName: {{ include "postgres.fullname" . }}
  selector:
    matchLabels:
      {{- include "postgres.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/customconfig: {{ include (print $.Template.BasePath "/customconfig.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "postgres.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgres.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: PGDATA
              value: "/var/lib/postgresql/data/pg"
            {{- if .Values.settings.authMethod }}
            - name: POSTGRES_HOST_AUTH_METHOD
              value: {{ .Values.settings.authMethod | quote }}
            {{- end }}
            {{- if .Values.settings.initDbArgs }}
            - name: POSTGRES_INITDB_ARGS
              value: {{ .Values.settings.initDbArgs | quote }}
            {{- end }}
          {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "postgres.fullname" . }}
          {{- if .Values.customLivenessProbe }}
          livenessProbe:
            {{- toYaml .Values.customLivenessProbe | nindent 12 }}
          {{- else }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready -h localhost
          {{- with .Values.livenessProbe }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
            periodSeconds: {{ .periodSeconds }}                
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.customReadinessProbe }}
          readinessProbe:
            {{- toYaml .Values.customReadinessProbe | nindent 12 }}
          {{- else }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready -h localhost
          {{- with .Values.readinessProbe }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
            periodSeconds: {{ .periodSeconds }}                
          {{- end }}
          {{- end }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.args }}
          args:
            {{- range .Values.args }}
            - {{ . }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - mountPath: /var/run
              name: run
            - mountPath: /tmp
              name: tmp
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
            {{- if .Values.customConfig }}
            - mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
              name: customconfig
            {{- end }}
            {{- if .Values.userDatabase }}
            - mountPath: /docker-entrypoint-initdb.d/init-user-db.sh
              subPath: init-user-db.sh
              name: inituserdb
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: run
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        {{- if .Values.customConfig }}
        - name: customconfig
          configMap:
            name: {{ include "postgres.fullname" . }}-customconfig
        {{- end }}
        {{- if .Values.userDatabase }}
        - name: inituserdb
          configMap:
            name: {{ include "postgres.fullname" . }}-inituserdb
            defaultMode: 0555
        {{- end }}
{{- with .Values.storage }}
  {{- $createPvc := and (empty .persistentVolumeClaimName) .requestedSize }}
  {{- if not $createPvc }}
        - name: postgres-data
        {{- if .persistentVolumeClaimName }}
          persistentVolumeClaim:
            claimName: {{ .persistentVolumeClaimName }}
        {{- else }}
          emptyDir: {}
        {{- end }}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        {{- with .accessModes }}
        accessModes:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- if .className }}
        storageClassName: {{ .className }}
        {{- end }}
        resources:
          requests:
            storage: {{ .requestedSize }}
  {{- end }}
{{- end }}
