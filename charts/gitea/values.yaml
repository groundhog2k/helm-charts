## Default values for Gitea deployment

## Gitea docker image
image:
  repository: gitea/gitea
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

## Number of replicas
replicaCount: 1

## Pull secrets and name override options
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

## Pod deployment strategy
strategy: {}

## Optional service account
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## Additional pod annotations
podAnnotations: {}

## Pod security options (default: fsGroup)
podSecurityContext:
  fsGroup: 1000

## Default security options to run Gitea as read only container without privilege escalation
securityContext:
  allowPrivilegeEscalation: false
  privileged: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsGroup: 1000
  runAsUser: 1000

## Default Gitea service ports (default web and ssh port)
services:
  http:
    type: ClusterIP
    port: 80
    ## The node port (only relevant for type LoadBalancer or NodePort)
    nodePort:
    ## The cluster ip address (only relevant for type LoadBalancer or NodePort)
    clusterIP:
    ## The loadbalancer ip address (only relevant for type LoadBalancer)
    loadBalancerIP:
  ssh:
    type: ClusterIP
    port: 22
    ## The node port (only relevant for type LoadBalancer or NodePort)
    nodePort:
    ## The cluster ip address (only relevant for type LoadBalancer or NodePort)
    clusterIP:
    ## The loadbalancer ip address (only relevant for type LoadBalancer)
    loadBalancerIP:

## Ingress configuration
ingress:
  enabled: false

  ## Maximal body size (default: 64m - increase if uploads to gitea failing)
  maxBodySize: 64m

  ## Additional ingress annotations
  annotations: {}
#   kubernetes.io/ingress.class: nginx
#   kubernetes.io/tls-acme: "true"

  ## Hosts
  hosts:
    - host: chart-example.local
      paths: []

  ## TLS settings for hosts
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## Resource limits and requests
resources: {}
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

## Custom liveness probe (overwrites default liveness probe)
customLivenessProbe: {}

## Default liveness probe
livenessProbe:
  enabled: true
  initialDelaySeconds: 10
  timeoutSeconds: 10
  failureThreshold: 5
  successThreshold: 1
  periodSeconds: 30

## Custom readiness probe (overwrites default readiness probe)
customReadinessProbe: {}

## Default readiness probe
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  timeoutSeconds: 10
  failureThreshold: 5
  successThreshold: 1
  periodSeconds: 10

## Additional node selector
nodeSelector: {}

tolerations: []

affinity: {}

## Internal container HTTP port (default: 8000)
containerHttpPort: 8000
## Internal container SSH port (default: 8022)
containerSshPort: 8022

## Additional environment variables
env: []

## Arguments for the container entrypoint process
args: []

## Additional Gitea settings defined in this chart
settings:
  ## Delay after installation before adminstrative user gets created (Database must be ready and connected)
  postInstallDelay: 60
  ## Defines the default administrator (first user) - Password must be changed after first login!
  defaultAdmin:
    user: root
    password: admin
    email: root@admin.local

## Gitea specific configuration as described in https://docs.gitea.io/en-us/config-cheat-sheet/
## More values and sections can be added
gitea:
  config:
    RUN_MODE: "prod"
    APP_NAME: "Gitea: Git with a cup of tea"

    database:
      PATH: "/data/gitea/gitea.db"

    log:
      ROOT_PATH: "/data/log"
      MODE: "file"
      LEVEL: "info"

    server:
      PROTOCOL: http
      DISABLE_SSH: "false"
      START_SSH_SERVER: "true"
      LFS_START_SERVER: "true"
      LFS_CONTENT_PATH: "/data/gitea/lfs"
      OFFLINE_MODE: "false"
      # LFS JWT secret
      LFS_JWT_SECRET:

      SSH_ROOT_PATH: "/data/ssh"
      APP_DATA_PATH: "/data/gitea"

    security:
      INSTALL_LOCK: "true"
      # Internal secret and token
      SECRET_KEY:
      INTERNAL_TOKEN:

    repositories:
      ROOT: "/data/git/gitea-repositories"

    service:
      REGISTER_EMAIL_CONFIRM: "false"
      ENABLE_NOTIFY_MAIL: "false"
      DISABLE_REGISTRATION: "true"
      ALLOW_ONLY_EXTERNAL_REGISTRATION: "false"
      ENABLE_CAPTCHA: "false"
      REQUIRE_SIGNIN_VIEW: "false"
      DEFAULT_KEEP_EMAIL_PRIVATE: "true"
      DEFAULT_ALLOW_CREATE_ORGANIZATION: "true"
      DEFAULT_ENABLE_TIMETRACKING: "true"
      NO_REPLY_ADDRESS: "noreply.dev.k8.local"

    openid:
      ENABLE_OPENID_SIGNIN: "false"
      ENABLE_OPENID_SIGNUP: "false"

    picture:
      DISABLE_GRAVATAR: "false"
      ENABLE_FEDERATED_AVATAR: "true"

    # OAuth2 JWT secret
    oauth2:
      JWT_SECRET:

    mailer:
      ENABLED: "false"
      # HOST:
      # FROM:
      # USER:
      # PASSWD:

    # Indexer prevents scaling Gitea with replicas option and instances (>1) will crash - as a workaround the indexer STARTUP_TIMEOUT can be set to infinite
    # This workaround is working but not fully tested
    # Session cache must enabled and database must be MySQL/MariaDB or PostgreSQL!
    # Try at your own risk!
    # indexer:
      # STARTUP_TIMEOUT: 0

## Gitea storage parameters
storage:
  ## Set persistentVolumenClaimName to reference an existing PVC
  persistentVolumeClaimName:

  ## Alternative set requestedSize to define a size for a dynmaically created PVC
  requestedSize:

  ## the storage class name
  className:

  ## Default access mode (ReadWriteOnce)
  accessModes:
    - ReadWriteOnce

## MariaDB configuration
mariadb:
  ## Enable MariaDB helm chart for deployment (default: false)
  enabled: false

  ## Database configuration
  settings:
    ## Database startup arguments (enable UTF8MB4 and Unicode support)
    arguments:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci

    ## The root user password (default: a 10 char. alpahnumerical random password will be generated)
    rootPassword:

  ## Optional user database which is created during first startup with user and password
  userDatabase: {}
    ## Name of the user database
    # name:
    ## Database user with full access rights
    # user:
    ## Password of the database user (default: a 10 char. alpahnumerical random password will be generated)
    # password:

  # Storage parameters
  storage:
    ## Set persistentVolumenClaimName to reference an existing PVC
    persistentVolumeClaimName:

    ## Alternative set requestedSize to define a size for a dynmaically created PVC
    requestedSize:

    ## the storage class name
    className:

## PostgreSQL configuration
postgres:
  ## Enable PostgreSQL helm chart for deployment (default: false)
  enabled: false

  ## Database configuration
  settings:

    ## The superuser password (default: a 10 char. alpahnumerical random password will be generated)
    superuserPassword:

  ## User database which is created during first startup with user and password
  userDatabase: {}
    ## Database name
    # name:
    ## Database user
    # user:
    ## Database password (default: 10 alphanum. random characters)
    # password:

  # Storage parameters
  storage:
    ## Set persistentVolumenClaimName to reference an existing PVC
    persistentVolumeClaimName:

    ## Alternative set requestedSize to define a size for a dynmaically created PVC
    requestedSize:

    ## the storage class name
    className:

## Redis configuration
redis:
  ## Enable Redis helm chart for deployment (default: false)
  enabled: false

  # Storage parameters
  storage:
    ## Set persistentVolumenClaimName to reference an existing PVC
    persistentVolumeClaimName:

    ## Alternative set requestedSize to define a size for a dynmaically created PVC
    requestedSize:

    ## the storage class name
    className:
