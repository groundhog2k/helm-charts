apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mongodb.fullname" . }}-scripts
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
data:
  01-init-userdb.sh: |-
    #!/bin/sh
    set -e
    if [ ! -z "$MONGO_INITDB_ROOT_USERNAME" ] && [ ! -z "$MONGO_INITDB_ROOT_PASSWORD" ] && [ ! -z "$MONGO_INITDB_DATABASE" ] && [ ! -z "$USERDB_USER" ] && [ ! -z "$USERDB_PASSWORD" ]; then
      if [ "$HOSTNAME" = "{{ include "mongodb.fullname" . }}-0" ]; then
        echo "***** INIT: Creating database $MONGO_INITDB_DATABASE"
        mongosh --quiet --username $MONGO_INITDB_ROOT_USERNAME --password $MONGO_INITDB_ROOT_PASSWORD --eval "db.getSiblingDB(\"$MONGO_INITDB_DATABASE\").createUser({user: \"$USERDB_USER\", pwd: \"$USERDB_PASSWORD\", roles: [ \"readWrite\", \"dbAdmin\" ]})"
      fi
    fi
  
  extra-init-replicaset.sh: |-
    #!/bin/bash
    # //TODO: Improve scripts
    # //TODO: Allow arbiter and hidden
    # //TODO: Config settings for removing outdated secondaries?
    # //TODO: mongosh / mongo switch
    echo "***** EXTRA-INIT-REPLICASET: Init replicaset"
    suffix="{{ include "mongodb.fullname" . }}-internal.{{ .Release.Namespace }}.svc.{{ .Values.replicaSet.clusterDomain }}:{{ .Values.service.port }}"
    primary=$(mongosh --quiet --host $suffix --username $MONGO_INITDB_ROOT_USERNAME --password $MONGO_INITDB_ROOT_PASSWORD --eval "rs.status().members.filter(function(rs) { return rs.stateStr==='PRIMARY';})[0].name")
    if [ ! -z "$primary" ]; then
      echo "***** EXTRA-INIT-REPLICASET: Primary $primary found"
      secexists=$(mongosh --quiet --host $primary --username $MONGO_INITDB_ROOT_USERNAME --password $MONGO_INITDB_ROOT_PASSWORD --eval "rs.status().members.filter(function(rs) { return rs.name===\"$HOSTNAME.$suffix\";}).length")
      if [ "$secexists" = "0" ]; then
        echo "***** EXTRA-INIT-REPLICASET: Adding secondary $HOSTNAME.$suffix"
        mongosh --quiet --host $primary --username $MONGO_INITDB_ROOT_USERNAME --password $MONGO_INITDB_ROOT_PASSWORD --eval "rs.add({host:\"$HOSTNAME.$suffix\"})"
      else
        echo "***** EXTRA-INIT-REPLICASET: Secondary $HOSTNAME.$suffix already in cluster - doing nothing"
      fi
    else
      echo "***** EXTRA-INIT-REPLICASET: Primary not found - initialize it!"
      mongosh --quiet --username $MONGO_INITDB_ROOT_USERNAME --password $MONGO_INITDB_ROOT_PASSWORD --eval "rs.initiate({_id:\"{{ .Values.replicaSet.replicaSetName }}\",members:[{_id:0, host:\"$HOSTNAME.$suffix\"}]})"
    fi
    echo "***** EXTRA-INIT-REPLICASET: Done"

  extra-init.sh: |-
    #!/bin/bash
    waitready() {
      echo "***** EXTRA-INIT: Waiting until mongod is fully up and running"
      tries=10
      while true; do
        mp=$(ps aux | grep "mongod --config /etc/mongo/custom.conf" | grep -v grep)
        sleep 5
        if [ ! -z "$mp" ]; then
          break;
        fi
        (( tries-- ))
        if [ "$tries" -le 0 ]; then
          echo "***** EXTRA-INIT: mongod still not running.. Stopping hard"
          kill -STOP 1
          exit 1
        fi
      done
      echo "***** EXTRA-INIT mongod is running"
    }
    echo "***** EXTRA-INIT: Starting original entrypoint in background"
    docker-entrypoint.sh $@ &
    {{- if .Values.replicaSet.enable }}
    waitready
    /extrainitscripts/extra-init-replicaset.sh
    {{- end }}
    wait

  init.sh: |
    #!/bin/sh
    echo "Start initialization"
    echo "Copy init scripts"
    cp /scripts/0*-init-*.sh /initscripts
    cp /scripts/extra-*.sh /extrainitscripts
    if [ -d /extrascripts ]; then
      echo "Copy extra scripts"
      cp /extrascripts/* /scripts
    fi
    if [ -d /customscripts ]; then
      echo "Copy custom scripts"
      cp /customscripts/* /scripts
    fi
    echo "Copy custom configuration"
    touch /configs/custom.conf
    if [ -d /customconfig ]; then
      echo "Create custom mongodb config"
      cat /customconfig/* >>/configs/custom.conf
    fi
    if [ -d /extraconfigs ]; then
      echo "Add extra configs to custom mongodb config"
      cat /extraconfigs/* >>/configs/custom.conf
    fi
    {{- if .Values.replicaSet.enable }}
    # //TODO: Allow replicaSet key from secret
    echo "Copy replicaset key"
    echo "{{ .Values.replicaSet.key }}" > /replicaset/keyfile
    chmod 400 /replicaset/keyfile
    {{- end }}
    echo "Initialization done."
