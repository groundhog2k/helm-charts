apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mongodb.fullname" . }}-scripts
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
data:
  01-init-userdb.sh: |-
    #!/bin/sh
    # Log a message in extra initialization phase
    # $1 - the log message
    log() {
      echo "***** INIT: $1"
      echo "$(date) ***** INIT: $1" >>/tmp/init.log
    }

    set -e
    log "Start user database initalization"
    if [ ! -z "$MONGO_INITDB_ROOT_USERNAME" ] && [ ! -z "$MONGO_INITDB_ROOT_PASSWORD" ] && [ ! -z "$MONGO_INITDB_DATABASE" ] && [ ! -z "$USERDB_USER" ] && [ ! -z "$USERDB_PASSWORD" ]; then
      log "Creating database $MONGO_INITDB_DATABASE"
      $MONGOSHELL --eval "db.getSiblingDB(\"$MONGO_INITDB_DATABASE\").createUser({user: \"$USERDB_USER\", pwd: \"$USERDB_PASSWORD\", roles: [ \"readWrite\", \"dbAdmin\" ]})"
    else
      log "Missing parameters to create database"
    fi
    log "Done with user database initialization"

  extra-init.sh: |-
    #!/bin/sh    
    # Log a message in extra initialization phase
    # $1 - the log message
    log() {
      echo "***** EXTRA-INIT: $1"
      echo "$(date) ***** EXTRA-INIT: $1" >>/tmp/extra-init.log
    }

    # Wait until final mongod is fully up and running in background
    # see "replicaSet.extraInit" in values.yaml
    # $1 - Number of retries
    # $2 - Delay between retries
    wait_ready() {
      log "Waiting until mongod is fully up and running"
      local retries=$1
      local delay=$2
      while true; do
        mp=$(ps aux | grep "mongod --config /etc/mongo/custom.conf" | grep -v grep)
        sleep $delay
        if [ ! -z "$mp" ]; then
          break;
        fi
        retries=$((retries-1))
        if [ "$retries" -le 0 ]; then
          log "mongod is not running.. Stopping hard"
          kill -STOP 1
          exit 1
        fi
        log "Waiting for mongod..."
      done
      log "mongod is running"
    }

    # Try to find primary instance of ReplicaSet
    # $1 - FQDN of the headless service for this MongoDB cluster
    # $? - FQDN of primary instance or empty
    find_primary() {
      local service=$1
      result=$($MONGOSHELL --host $service --eval "rs.status().members.filter(function(rs) { return rs.stateStr==='PRIMARY';})[0].name")
      returncode=$?
      if [ $returncode -eq 0 ]; then
        echo $result
      else
        echo
      fi
    }

    # Init ReplicaSet primary instance
    # $1 - FQDN of the new primary instance
    # $2 - Name of the ReplicaSet
    init_primary() {
      local primary=$1
      local replicaset=$2
      $MONGOSHELL --eval "rs.initiate({_id:\"$replicaset\",members:[{_id:0, host:\"$primary\"}]})"
      result=$?
      if [ $result -ne 0 ]; then
        log "Failed to init primary - Ignoring errorcode $result, because primary may have existed before: $result"
      fi
      log "$primary initialized as primary instance"
    }

    # Detects if a secondary instance with given name exists
    # $1 - FQDN of primary instance for script execution
    # $2 - FQDN of the secondary instance to find
    # $? - "0" if no secondary instance was found - otherwise "1"
    detect_secondary() {
      local primary=$1
      local secondary=$2
      result=$($MONGOSHELL --host $primary --eval "rs.status().members.filter(function(rs) { return rs.name===\"$secondary\";}).length")
      returncode=$?
      if [ $returncode -eq 0 ]; then
        echo $result
      else
        log "Failed to query for instance $secondary in ReplicaSet - Exiting with errorcode: $returncode"
        exit $returncode
      fi      
    }

    # Adds a secondary instance to the ReplicaSet
    # $1 - FQDN of primary instance for script execution
    # $2 - FQDN of the secondary instance which should be added to the ReplicaSet
    add_secondary() {
      local primary=$1
      local secondary=$2
      local result=$(detect_secondary $primary $secondary)
      if [ "$result" = "0" ]; then
        log "Add $secondary as secondary instance"
        $MONGOSHELL --host $primary --eval "rs.add({host:\"$secondary\"})"
        result=$?
        if [ $result -ne 0 ]; then
          log "Failed to add secondary to ReplicaSet - Exiting with errorcode: $result"
          exit $result
        fi
        log "$secondary added to ReplicaSet"
      else
        log "Secondary instance $secondary already in ReplicaSet - doing nothing"
      fi
    }

    # Adds an arbiter instance to the ReplicaSet
    # $1 - FQDN of primary instance for script execution
    # $2 - FQDN of the arbiter instance which should be added to the ReplicaSet
    add_arbiter() {
      local primary=$1
      local arbiter=$2
      local result=$(detect_secondary $primary $arbiter)
      if [ "$result" = "0" ]; then
        log "Add $arbiter as arbiter instance"
        $MONGOSHELL --host $primary --eval "db.adminCommand({\"setDefaultRWConcern\" : 1,\"defaultWriteConcern\" : {\"w\" : 1}})"
        result=$?
        if [ $result -ne 0 ]; then
          log "Failed to configure write concern - Exiting with errorcode: $result"
          exit $result
        else
          $MONGOSHELL --host $primary --eval "rs.addArb(\"$arbiter\")"
          result=$?
          if [ $result -ne 0 ]; then
            log "Failed to add arbiter - Exiting with errorcode: $result"
            exit $result
          fi
        fi
        log "$arbiter added to ReplicaSet as arbiter"
      else
        log "Arbiter instance $arbiter already in ReplicaSet - doing nothing"
      fi
    }

    # $1 - FQDN of the headless service for this MongoDB cluster
    # $2 - FQDN of the headless arbiter service for this MongoDB cluster
    init_arbiter() {
      local service=$1
      local arbiter_service=$2
      local delay=$3
      local primary=$(find_primary $service)
      if [ ! -z "$primary" ]; then
        log "Primary $primary found - Adding this instance as arbiter"
        add_arbiter $primary "$HOSTNAME.$arbiter_service"
      else
        log "ERROR: Primary not found - Waiting $delay seconds before retry"
        sleep $delay
        exit 1
      fi
    }

    # Try to initialize a ReplicaSet
    # $1 - FQDN of the headless service for this MongoDB cluster
    # $2 - Name of the ReplicaSet
    init_replicaset() {
      log "Start ReplicaSet initialization"
      local service=$1
      local replicaset=$2
      local primary=$(find_primary $service)
      if [ -z "$primary" ]; then
        log "Primary not found - Initializing this instance as primary"
        init_primary "$HOSTNAME.$service" $replicaset
      else
        log "Primary $primary found - Adding this instance as secondary"
        add_secondary $primary "$HOSTNAME.$service"
      fi
      log "Done with ReplicaSet initialization\n-----"
    }

    # Terminates a child process
    # $1 - PID of child process
    # $2 - Kill signal number
    # $3 - Delay before terminate (leave empty if no delay desired)
    _terminate() {
      local childproc=$1
      local signal=$2
      local delay=$3
      log "Terminating entrypoint"
      kill -s $signal $childproc
      if [ ! -z "$delay" ]; then
        log "Waiting $delay seconds before termination..."
        sleep $delay
      fi
      log "Bye bye"
    }

    init() {
      if [ ! -f /extrainitscripts/mongoshell ]; then
        log "Try to detect default mongo shell executable"
        mongoshell=$(which mongosh)
        if [ ! -z "$mongoshell" ]; then
          log "Using mongosh as default shell"
        else
          log "Using mongo as default shell"
          mongoshell=$(which mongo)
        fi
        ln -s $mongoshell /extrainitscripts/mongoshell
      else
        log "Symbolic link for mongoshell already exists"
      fi
      export MONGOSHELL="/extrainitscripts/mongoshell --quiet --username $MONGO_INITDB_ROOT_USERNAME --password $MONGO_INITDB_ROOT_PASSWORD"
    }

    main() {
      log "Starting original entrypoint in background"
      docker-entrypoint.sh $@ &
      mongoproc=$!
      log "Entrypoint pid: $mongoproc"
      {{- if .Values.replicaSet.enabled }}
      wait_ready {{ .Values.replicaSet.extraInit.retries }} {{ .Values.replicaSet.extraInit.delay }}
      if [ "$MONGOTYPE" = "ARBITER" ]; then
        init_arbiter "{{ include "mongodb.fullname" . }}-{{ .Values.service.headlessServiceSuffix }}.{{ .Release.Namespace }}.svc.{{ .Values.replicaSet.clusterDomain }}:{{ .Values.service.port }}" "{{ include "mongodb.fullname" . }}-{{ .Values.replicaSet.arbiter.headlessServiceSuffix }}.{{ .Release.Namespace }}.svc.{{ .Values.replicaSet.clusterDomain }}:{{ .Values.service.port }}" {{ .Values.replicaSet.arbiter.waitForPrimary }}
      else
        init_replicaset "{{ include "mongodb.fullname" . }}-{{ .Values.service.headlessServiceSuffix }}.{{ .Release.Namespace }}.svc.{{ .Values.replicaSet.clusterDomain }}:{{ .Values.service.port }}" "{{ .Values.replicaSet.replicaSetName }}"
      fi
      terminatedelay={{ .Values.replicaSet.shutdown.delay }}
      {{- end }}
      trap "_terminate $mongoproc 15 $terminatedelay" 15
      trap "_terminate $mongoproc 9 $terminatedelay" 9
      wait $mongoproc
    }

    init
    main $@

  init.sh: |
    #!/bin/sh
    echo "Start initialization"
    echo "Copy init scripts"
    # Copy optional initialization scripts only to first cluster instance (initial primary on a new replicaset)
    if [ "$HOSTNAME" = "{{ include "mongodb.fullname" . }}-0" ]; then
      cp /scripts/0*-init-*.sh /initscripts
      if [ -d /extrascripts ]; then
        echo "Copy extra scripts"
        cp /extrascripts/* /scripts
      fi
      if [ -d /customscripts ]; then
        echo "Copy custom scripts"
        cp /customscripts/* /scripts
      fi
    fi
    # Copy extra initialization scripts for ReplicaSet cluster
    cp /scripts/extra-*.sh /extrainitscripts
    echo "Copy custom configuration"
    touch /configs/custom.conf
    if [ -d /customconfig ]; then
      echo "Create custom mongodb config"
      cat /customconfig/* >>/configs/custom.conf
    fi
    if [ -d /extraconfigs ]; then
      echo "Add extra configs to custom mongodb config"
      cat /extraconfigs/* >>/configs/custom.conf
    fi
    {{- if .Values.replicaSet.enabled }}
    # //TODO: Allow replicaSet key from secret
    echo "Copy replicaset key"
    echo "{{ .Values.replicaSet.key }}" > /replicaset/keyfile
    chmod 400 /replicaset/keyfile
    {{- end }}
    echo "Initialization done."

    # //TODO: Allow hidden secondaries
