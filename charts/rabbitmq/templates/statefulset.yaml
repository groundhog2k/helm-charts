apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "rabbitmq.fullname" . }}
  labels:
    {{- include "rabbitmq.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "rabbitmq.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "rabbitmq.fullname" . }}-internal
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy: 
    type: {{ .Values.updateStrategyType }}
  template:
    metadata:
      annotations:
        checksum/rabbit-config: {{ include (print $.Template.BasePath "/rabbit-config.yaml") . | sha256sum }}
        checksum/plugins-config: {{ include (print $.Template.BasePath "/plugins-config.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "rabbitmq.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "rabbitmq.serviceAccountName" . }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: {{ .Chart.Name }}-init
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          volumeMounts:
            - name: config
              mountPath: /etc/rabbitmq
            - name: rabbitconfig
              mountPath: /temp/rabbitmq.conf
              subPath: rabbitmq.conf
          {{- if .Values.plugins }}
            - name: plugins
              mountPath: /temp/enabled_plugins
              subPath: enabled_plugins
          {{- end }}
          command: ['sh', '-c', 'cp /temp/* /etc/rabbitmq && mkdir -p /etc/rabbitmq/conf.d']
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: amqp
              containerPort: 5672
            - name: mgmt
              containerPort: 15672
            - name: epmd
              containerPort: 4369
            - name: dist
              containerPort: 25672
          {{- if .Values.customLivenessProbe }}
          livenessProbe:
            {{- toYaml .Values.customLivenessProbe | nindent 12 }}
          {{- else }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
          {{- with .Values.livenessProbe }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            successThreshold: {{ .successThreshold }}
            failureThreshold: {{ .failureThreshold }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.customReadinessProbe }}
          readinessProbe:
            {{- toYaml .Values.customReadinessProbe | nindent 12 }}
          {{- else }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
          {{- with .Values.readinessProbe }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            successThreshold: {{ .successThreshold }}
            failureThreshold: {{ .failureThreshold }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          lifecycle:
          {{- if and .Values.clustering.rebalance (gt (.Values.replicaCount | int) 1) }}
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    until rabbitmqctl cluster_status >/dev/null; do
                        echo "Waiting for cluster readiness..."
                        sleep 5
                    done
                    rabbitmq-queues rebalance "all"
          {{- end }}
            preStop:
              exec:
                command:
                  - bash
                  - -ec
                  - rabbitmqctl stop_app
          env:
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- if contains "rabbitmq_peer_discovery_k8s" .Values.plugins }}
            - name: RABBITMQ_NODENAME   
              value: rabbit@$(NODE_NAME).{{ include "rabbitmq.fullname" . }}-internal.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
            {{- else }}
            - name: RABBITMQ_NODENAME
              value: rabbit@$(NODE_NAME)
            {{- end }}
          {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
          {{- end }}            
          envFrom:
            - secretRef:
                name: {{ include "rabbitmq.fullname" . }}
          {{- if .Values.args }}
          args:
            {{- range .Values.args }}
            - {{ . }}
            {{- end }}
          {{- end }}                
          volumeMounts:
            - name: logs
              mountPath: /var/log/rabbitmq
            - name: tmp
              mountPath: /tmp
            - name: rabbitmq-volume
              mountPath: /var/lib/rabbitmq
            - name: config
              mountPath: /etc/rabbitmq
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: logs
          emptyDir: {}
        - name: config
          emptyDir: {}
        - name: rabbitconfig
          configMap:
            name: {{ include "rabbitmq.fullname" . }}-config
      {{- if .Values.plugins }}
        - name: plugins
          configMap:
            name: {{ include "rabbitmq.fullname" . }}-plugins
      {{- end }}
  {{- if .Values.storage.persistentVolumeClaimName }}
        - name: rabbitmq-volume
          persistentVolumeClaim:
            claimName: {{ .Values.storage.persistentVolumeClaimName }}
  {{- else }}
  {{- if not .Values.storage.requestedSize }}
        - name: rabbitmq-volume
          emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-volume
      spec:
        {{- with .Values.storage.accessModes }}
        accessModes:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- if .Values.storage.className }}
        storageClassName: {{ .Values.storage.className }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.storage.requestedSize }}
  {{- end }}
  {{- end }}
