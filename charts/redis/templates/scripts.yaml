apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "redis.fullname" . }}-scripts
  labels:
    {{- include "redis.labels" . | nindent 4 }}
data:
  init.sh: |
    #!/bin/sh
  {{- if .Values.haMode.enabled }}
    MASTER="$(timeout {{ .Values.haMode.masterAliveTestTimeout }}s redis-cli -h {{ template "redis.fullname" . }} -p {{ .Values.service.sentinelPort }} sentinel get-master-addr-by-name {{ include "redis.masterGroupName" . }} | head -n 1)"
  {{- end }}
    REDIS_CONFIG=/data/conf/redis.conf
    SENTINEL_CONFIG=/data/conf/sentinel.conf

  {{- if .Values.haMode.enabled }}
    test_master_alive() {
      echo "Checking if master is alive"
      TEST="$(timeout {{ .Values.haMode.masterAliveTestTimeout }}s redis-cli -h $MASTER -p 6379 ping)"
      if [ -z "$TEST" ]; then
        return 1
      fi
      return 0
    }

    test_valid_dns() {
      {{- if .Values.haMode.useDnsNames }}
      MASTERENTRY="$(getent hosts $MASTER | awk '{ print $2 }')"
      {{- else }}
      MASTERENTRY="$(getent hosts $MASTER | awk '{ print $1 }')"
      {{- end }}
    }
  {{- end }}

    configure_redis() {
        echo "Configuring redis server..."
        rm -f $REDIS_CONFIG

        echo "Setting redis server defaults"
        echo "port 6379" >>$REDIS_CONFIG
        echo "protected-mode no" >>$REDIS_CONFIG
        echo "bind 0.0.0.0" >>$REDIS_CONFIG
        echo "dir /data" >>$REDIS_CONFIG

  {{- if .Values.haMode.enabled }}
        if [ -z "$MASTER" ]; then
          echo "No master found - This instance ($HOSTNAME) will be master now"
        else
          echo "Redis master was found with address $MASTER - Checking host dns entry"
          test_valid_dns
          if [ -z "$MASTERENTRY" ]; then
            if [ -f "/data/failover_restart" ]; then
              rm /data/failover_restart
              echo "Forcing failover now"
              redis-cli -h {{ template "redis.fullname" . }} -p {{ .Values.service.sentinelPort }} sentinel failover {{ include "redis.masterGroupName" . }}
            else
              echo "No valid DNS entry found! - waiting for failover"
              sleep {{ .Values.haMode.failoverWait }}
              touch /data/failover_restart
            fi
            exit 1
          else
            MASTER=$MASTERENTRY
            echo "$MASTER has valid DNS entry"
            test_master_alive
            if [ "$?" -eq "1" ]; then
              if [ -f "/data/failover_restart" ]; then
                rm /data/failover_restart
                echo "Master is still dead! - forcing failover and retry pod initialization"
                redis-cli -h {{ template "redis.fullname" . }} -p {{ .Values.service.sentinelPort }} sentinel failover {{ include "redis.masterGroupName" . }}
              else
                echo "Dead master at address $MASTER detected! - waiting for failover"
                sleep {{ .Values.haMode.failoverWait }}
                touch /data/failover_restart
              fi
              exit 1
            else
              rm -f /data/failover_restart
              echo "Setting this instance ($HOSTNAME) as replicaof $MASTER"
              echo "replicaof $MASTER 6379" >>$REDIS_CONFIG
            fi
          fi
        fi
  {{- end }}

        if [ -f /usr/local/etc/redis/redis.conf ]; then
            echo "Adding optional redis configuration settings"
            cat /usr/local/etc/redis/redis.conf >>$REDIS_CONFIG
        fi
        if [ -d /extraredisconfigs ]; then
          echo "Adding extra redis configs to redis configuration"
          cat /extraredisconfigs/* >>$REDIS_CONFIG
        fi
        echo "Configuring redis server finished."
    }
  {{- if .Values.haMode.enabled }}
    configure_sentinel() {
        echo "Redis HA-mode enabled"
        echo "Configuring sentinel server..."
        rm -f $SENTINEL_CONFIG

        echo "Setting sentinel defaults"
        if [ -z "$MASTER" ]; then
          {{- if .Values.haMode.useDnsNames }}
          MASTER=${HOSTNAME}.{{ include "redis.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
          {{- else }}
          MASTER="$(getent hosts $HOSTNAME | awk '{ print $1 }')"
          {{- end }}
          echo "No master found - Configuring sentinel for master $HOSTNAME with address $MASTER"
          echo "sentinel monitor {{ include "redis.masterGroupName" . }} $MASTER 6379 {{ .Values.haMode.quorum }}" >>$SENTINEL_CONFIG
        else
          echo "Redis master was found - Configuring sentinel for master address $MASTER"
          echo "sentinel monitor {{ include "redis.masterGroupName" . }} $MASTER 6379 {{ .Values.haMode.quorum }}" >>$SENTINEL_CONFIG
        fi
        {{- if .Values.haMode.useDnsNames }}
        echo "SENTINEL resolve-hostnames yes" >>$SENTINEL_CONFIG
        echo "SENTINEL announce-hostnames yes" >>$SENTINEL_CONFIG
        {{- end }}
        echo "sentinel down-after-milliseconds {{ include "redis.masterGroupName" . }} {{ .Values.haMode.downAfterMilliseconds }}" >>$SENTINEL_CONFIG
        echo "sentinel failover-timeout {{ include "redis.masterGroupName" . }} {{ .Values.haMode.failoverTimeout }}" >>$SENTINEL_CONFIG
        
        if [ -f /usr/local/etc/redis/sentinel.conf ]; then
            echo "Adding optional sentinel configuration settings"
            cat /usr/local/etc/redis/sentinel.conf >>$SENTINEL_CONFIG
        fi
        if [ -d /extrasentinelconfigs ]; then
          echo "Adding extra sentinel configs to sentinel configuration"
          cat /extrasentinelconfigs/* >>$SENTINEL_CONFIG
        fi
        echo "Configuring sentinel server finished."
    }
  {{- end }}

    echo "Initialize configuration..."
    mkdir -p /data/conf
    configure_redis
  {{- if .Values.haMode.enabled }}
    configure_sentinel
  {{- end }}
    echo "Finished."
