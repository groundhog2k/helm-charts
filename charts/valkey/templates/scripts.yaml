apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "valkey.fullname" . }}-scripts
  labels:
    {{- include "valkey.labels" . | nindent 4 }}
data:
  init.sh: |
    #!/bin/bash
    VALKEY_CONFIG=/data/conf/valkey.conf
    SENTINEL_CONFIG=/data/conf/sentinel.conf

    # Clean up old init logs or print them
    cleanup_log() {
  {{- if not .Values.haMode.keepOldLogs }}
      rm -f /data/init.log
  {{- end }}
      if [ -f "/data/init.log" ]; then
        echo "Detected restart of this instance ($HOSTNAME)"
        echo "## This was the previous log:"
        cat /data/init.log
        echo "## End of previous log"
      fi
    }
  
    # Log a message during initialization phase
    # $1 - the log message
    log() {
      echo "$(date) $1"
      echo "$(date) $1" >>/data/init.log
    }

    # Creating valkey base configuration
    configure_valkey_base() {
      log "Setting valkey server defaults"
      echo "port 6379" >>$VALKEY_CONFIG
      echo "protected-mode no" >>$VALKEY_CONFIG
      echo "bind 0.0.0.0" >>$VALKEY_CONFIG
      echo "dir /data" >>$VALKEY_CONFIG
      log "Finished creating base configuration"
    }

    configure_valkey_ext() {
      log "Setting extended valkey configuration"
      if [ -f /usr/local/etc/valkey/valkey.conf ]; then
          log "Adding optional valkey configuration"
          cat /usr/local/etc/valkey/valkey.conf >>$VALKEY_CONFIG
      fi
      if [ -d /extravalkeyconfigs ]; then
        log "Adding extra valkey configs to valkey configuration"
        cat /extravalkeyconfigs/* >>$VALKEY_CONFIG
      fi
    }

    test_master_alive() {
      TEST="$(timeout {{ .Values.haMode.masterAliveTestTimeout }}s valkey-cli -h $MASTER -p 6379 $VALKEYUSER $VALKEYPWD ping)"
      if [ -z "$TEST" ]; then
        log "Master is not alive"
        return 1
      fi
      log "Master is alive"
      return 0
    }

    test_valid_dns() {
      KNOWN_HOSTS=($(getent hosts {{ include "valkey.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }} | awk '{ print $1 }'))
      log "## Known hosts for headless service {{ include "valkey.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:"
      for AHOSTIP in "${KNOWN_HOSTS[@]}"; do
        AHOSTNAME=$(getent hosts $AHOSTIP | awk '{print $2}')
        log "${AHOSTIP} ${AHOSTNAME}"
      done
      log "#####"
      {{- if .Values.haMode.useDnsNames }}
      MASTERENTRY="$(getent hosts $MASTER | awk '{ print $2 }')"
      {{- else }}
      MASTERENTRY="$(getent hosts $MASTER | awk '{ print $1 }')"
      {{- end }}
    }

    configure_sentinel() {
      log "Configuring sentinel server..."
      if [ -z "$MASTER" ]; then
        {{- if .Values.haMode.useDnsNames }}
        MASTER=${HOSTNAME}.{{ include "valkey.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
        {{- else }}
        MASTER="$(getent hosts $HOSTNAME | awk '{ print $1 }')"
        {{- end }}
        log "No master found - Configuring sentinel for master $HOSTNAME with address $MASTER"
        echo "sentinel monitor {{ include "valkey.masterGroupName" . }} $MASTER 6379 {{ .Values.haMode.quorum }}" >>$SENTINEL_CONFIG
      else
        log "Valkey master was found - Configuring sentinel for master address $MASTER"
        echo "sentinel monitor {{ include "valkey.masterGroupName" . }} $MASTER 6379 {{ .Values.haMode.quorum }}" >>$SENTINEL_CONFIG
      fi
      {{- if .Values.haMode.useDnsNames }}
      echo "SENTINEL resolve-hostnames yes" >>$SENTINEL_CONFIG
      echo "SENTINEL announce-hostnames yes" >>$SENTINEL_CONFIG
      {{- end }}
      echo "sentinel down-after-milliseconds {{ include "valkey.masterGroupName" . }} {{ .Values.haMode.downAfterMilliseconds }}" >>$SENTINEL_CONFIG
      echo "sentinel failover-timeout {{ include "valkey.masterGroupName" . }} {{ .Values.haMode.failoverTimeout }}" >>$SENTINEL_CONFIG
    }

    configure_sentinel_ext() {
      log "Setting extended sentinel configuration"
      if [ -f /usr/local/etc/valkey/sentinel.conf ]; then
          log "Adding optional sentinel configuration settings"
          cat /usr/local/etc/valkey/sentinel.conf >>$SENTINEL_CONFIG
      fi
      if [ -d /extrasentinelconfigs ]; then
        log "Adding extra sentinel configs to sentinel configuration"
        cat /extrasentinelconfigs/* >>$SENTINEL_CONFIG
      fi
      log "Configuring sentinel server finished."
    }

    configure_valkey_cluster() {
      log "Determining authentication parameters"
      VALKEYUSER=$(cat $VALKEY_CONFIG | grep masteruser | awk '{ print $2 }')
      if [ ! -z "$VALKEYUSER" ]; then
        VALKEYUSER="--user $VALKEYUSER"
      fi
      VALKEYPWD=$(cat $VALKEY_CONFIG | grep masterauth | awk '{ print $2 }')
      if [ ! -z "$VALKEYPWD" ]; then
        VALKEYPWD="--pass $VALKEYPWD"
      fi
      SENTINELUSER=$(cat $SENTINEL_CONFIG | grep "sentinel sentinel-user" | awk '{ print $3 }')
      if [ ! -z "$SENTINELUSER" ]; then
        SENTINELUSER="--user $SENTINELUSER"
      fi
      SENTINELPWD=$(cat $SENTINEL_CONFIG | grep "sentinel sentinel-pass" | awk '{ print $3 }')
      if [ ! -z "$SENTINELPWD" ]; then
        SENTINELPWD="--pass $SENTINELPWD"
      fi

      log "Try to resolve cluster service.."
      SERVICE="$(getent hosts {{ template "valkey.fullname" . }})"
      if [ -z "$SERVICE" ]; then
        log "Can't resolve service - Will restart after DNS failure wait"
        sleep {{ .Values.haMode.dnsFailureWait }}
        log "Restart"
        exit 1
      else
        log "Service resolved: ${SERVICE}"
      fi
      log "Try to detect cluster master.."
      MASTER="$(timeout {{ .Values.haMode.masterAliveTestTimeout }}s valkey-cli -h {{ template "valkey.fullname" . }} -p {{ .Values.service.sentinelPort }} $SENTINELUSER $SENTINELPWD sentinel get-master-addr-by-name {{ include "valkey.masterGroupName" . }} | head -n 1)"
      if [ -z "$MASTER" ]; then
        log "No master found - This instance ($HOSTNAME) will be master now"
      else
        log "Valkey master was found with address $MASTER - Checking host dns entry"
        test_valid_dns
        if [ -z "$MASTERENTRY" ]; then
          log "No valid DNS entry found!"
          if [ -f "/data/failover_restart" ]; then
            rm /data/failover_restart
            log "Forcing failover now"
            valkey-cli -h {{ template "valkey.fullname" . }} -p {{ .Values.service.sentinelPort }} $SENTINELUSER $SENTINELPWD sentinel failover {{ include "valkey.masterGroupName" . }}
          else
            log "Waiting for failover before restart"
            sleep {{ .Values.haMode.failoverWait }}
            touch /data/failover_restart
          fi
          log "Restart"
          exit 1
        else
          MASTER=$MASTERENTRY
          log "$MASTER has valid DNS entry"
          log "Checking if master is alive"
          test_master_alive
          if [ "$?" -eq "1" ]; then
            if [ -f "/data/failover_restart" ]; then
              rm /data/failover_restart
              log "Master is still dead! - forcing failover and retry pod initialization"
              valkey-cli -h {{ template "valkey.fullname" . }} -p {{ .Values.service.sentinelPort }} $SENTINELUSER $SENTINELPWD sentinel failover {{ include "valkey.masterGroupName" . }}
            else
              log "Dead master at address $MASTER detected! - waiting for failover"
              sleep {{ .Values.haMode.failoverWait }}
              touch /data/failover_restart
            fi
            log "Restart"
            exit 1
          else
            rm -f /data/failover_restart
            log "Setting this instance ($HOSTNAME) as replicaof $MASTER"
            echo "replicaof $MASTER 6379" >>$VALKEY_CONFIG
          fi
        fi
      fi
    }

    log "Creating configuration..."
    mkdir -p /data/conf
    cleanup_log
    rm -f $VALKEY_CONFIG
    configure_valkey_base
    configure_valkey_ext
  {{- if .Values.haMode.enabled }}
    log "Valkey HA-mode is enabled"
    rm -f $SENTINEL_CONFIG
    configure_sentinel_ext
    configure_valkey_cluster
    configure_sentinel
  {{- end }}
    log "Done."
