apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "etcd.fullname" . }}-scripts
  labels:
    {{- include "etcd.labels" . | nindent 4 }}
data:
  startup.sh: |
    #!/bin/sh
    {{- $replicaCount := int .Values.replicas }}
    {{- $etcdFullname := include "etcd.fullname" . }}
    {{- $etcdInternalServiceName := printf "%s-internal" $etcdFullname }}
    {{- $initialCluster := list }}
    {{- $protocol := (or .Values.settings.https.enabled .Values.settings.https.autoTls) | ternary "https" "http" }}
    {{- $servicefqdn := printf "%s.%s.svc.%s" $etcdInternalServiceName .Release.Namespace .Values.clusterDomain }}
    echo "Initializing Etcd instance..."
    export ETCD_DATA_DIR="/data/etcd"
    export ETCD_NAME="${HOSTNAME}"
    export ETCD_INITIAL_CLUSTER_TOKEN="{{ .Values.settings.clusterToken }}"
    export ETCD_INITIAL_CLUSTER_STATE="new"
    export ETCD_LISTEN_CLIENT_URLS="{{ $protocol }}://0.0.0.0:2379"
    export ETCD_LISTEN_PEER_URLS="{{ $protocol }}://0.0.0.0:2380"
    {{- if .Values.serviceMonitor.enabled }}
    export ETCD_LISTEN_METRICS_URLS="http://0.0.0.0:12379"
    {{- end }}
    export ETCD_ADVERTISE_CLIENT_URLS="{{ $protocol }}://${HOSTNAME}.{{ $servicefqdn }}:2379"
    export ETCD_INITIAL_ADVERTISE_PEER_URLS="{{ $protocol }}://${HOSTNAME}.{{ $servicefqdn }}:2380"
    {{- range $e, $i := until $replicaCount }}
    {{- $initialCluster = append $initialCluster (printf "%s-%d=%s://%s-%d.%s:%d" $etcdFullname $i $protocol $etcdFullname $i $servicefqdn 2380) }}
    {{- end }}
    export ETCD_INITIAL_CLUSTER="{{ join "," $initialCluster | quote }}"
    {{- if .Values.settings.https.autoTls }}
    export ETCD_AUTO_TLS="true"
    export ETCD_PEER_AUTO_TLS="true"
    {{- end }}
    mkdir -p ${ETCD_DATA_DIR}
    chmod 700 ${ETCD_DATA_DIR}
    echo "Finished."
    echo "Starting etcd..."
    etcd $@ &
    etcdproc=$!
    trap "_terminate $etcdproc 15 {{ .Values.settings.shutdownDelay }}" 15
    trap "_terminate $etcdproc 9 {{ .Values.settings.shutdownDelay }}" 9
    wait $etcdproc

    # Terminates a child process
    # $1 - PID of child process
    # $2 - Kill signal number
    # $3 - Delay before terminate (leave empty if no delay desired)
    _terminate() {
      local childproc=$1
      local signal=$2
      local delay=$3
      log "Terminating entrypoint"
      etcd
      kill -s $signal $childproc
      if [ ! -z "$delay" ]; then
        log "Waiting $delay seconds before termination..."
        sleep $delay
      fi

      log "Bye bye"
    }
  
  healthcheck.sh: |
    #!/bin/sh
    etcdctl endpoint health {{ (or .Values.settings.https.enabled .Values.settings.https.autoTls) | ternary "--insecure-skip-tls-verify=true --insecure-transport=false" "" }}
